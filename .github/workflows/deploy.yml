name: 部署到腾讯云服务器

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 使用 SCP 上传代码到服务器
      - name: 部署到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}          # 服务器 IP 地址
          username: ${{ secrets.SERVER_USER }}      # SSH 用户名
          key: ${{ secrets.SERVER_SSH_KEY }}        # SSH 私钥
          port: ${{ secrets.SERVER_PORT || 22 }}    # SSH 端口
          source: "."                               # 上传整个项目目录
          target: "/www/wwwroot/my-next-app"        # 服务器上的目标目录
          overwrite: true                           # 覆盖已存在的文件
          rm: false                                 # 不删除目标目录其他文件（保留 .env.production）

      # 在服务器上安装依赖
      - name: 在服务器上安装依赖
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /www/wwwroot/my-next-app
            echo "=== 清理旧依赖（避免文件损坏）==="
            rm -rf node_modules package-lock.json
            echo "=== 安装所有依赖 ==="
            npm install

      # 在服务器上配置环境变量并构建项目
      - name: 在服务器上构建项目
        uses: appleboy/ssh-action@master
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          envs: DATABASE_URL,NEXTAUTH_SECRET,NEXTAUTH_URL
          script: |
            cd /www/wwwroot/my-next-app
            
            echo "=== 配置环境变量文件 ==="
            cat > .env.production << EOF
            DATABASE_URL="${DATABASE_URL}"
            NEXTAUTH_SECRET="${NEXTAUTH_SECRET}"
            NEXTAUTH_URL="${NEXTAUTH_URL}"
            NODE_ENV="production"
            EOF
            chmod 600 .env.production
            echo "环境变量文件已更新"
            
            echo "=== 生成 Prisma Client ==="
            npm run db:generate:prod
            
            echo "=== 推送数据库变更 ==="
            npm run db:push:prod
            
            echo "=== 构建 Next.js 项目 ==="
            npm run build
            
            echo "=== 验证构建是否成功 ==="
            if [ ! -d ".next" ]; then
                echo "❌ 错误: 构建失败，.next 目录未生成"
                exit 1
            fi
            echo "✅ 构建验证成功"
            
            echo "=== 构建后清理 node_modules（可选）==="
            # 构建完成后，可以删除 devDependencies 节省空间
            # npm prune --production

      # 重启 PM2 应用
      - name: 重启应用
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /www/wwwroot/my-next-app
            
            echo "=== 停止旧应用进程 ==="
            pm2 stop spring-lament-blog || true
            sleep 2
            
            echo "=== 删除旧进程（如果是 errored 状态） ==="
            pm2 delete spring-lament-blog || true
            
            echo "=== 重启应用 ==="
            pm2 start ecosystem.config.js --env production
            
            echo "=== 等待应用启动 ==="
            sleep 3
            
            echo "=== 验证应用状态 ==="
            if pm2 status | grep -q "spring-lament-blog.*online"; then
                echo "✅ 应用启动成功"
            else
                echo "❌ 应用启动失败"
                exit 1
            fi
            
            echo "=== 保存 PM2 配置 ==="
            pm2 save
